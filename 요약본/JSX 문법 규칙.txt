JSX 문법 규칙 , map

return (
  <div>
    <h1> Tittle</h1>
    <p>내용</p>
  <div>
);

  사용하는 Fragment 문법 가능


return(
<> 
     <h1> Tittle  </h1>
     <p> 내용 </p>
 </>
);

중괄호안에 숫자, 문자열, 변수 ,연산, 함수 호출등 가능함!

const name = "고양이"

reture(
   <h1> 안녕 , {name} </h1>
);


그럼 이제 브라우저에 

function App{
const cat Name = "워윅";
const age = 3;

reture(
<div> 
      <h1> 우리집 고양이  </h1>
<p> 이름은 {catName} 이고, 나이는 {age}살이에요 </p>
 </div>


우리집 고양이 
이름은 워윅이고, 나이는 3살이에요        뜸




리스트 출력할때

map 함수 
     
map은 배열의 각 요소를 변환 해서 새로운 배열을 만드는 함수
map()은 **"배열을 → 변환 → 새로운 배열 생성"**을 자동으로 처리해주는 특화된 함수


기존 배열의 각 요소를 어떤 규칙에 따라 바꾸고,
그 결과로 새로운 배열을 만들어주는 것입니다






조건부 렌더링 
보이거나 안보이게 하는거     예) 로그인 한 사람만 환영한다 리고 부여주는 거



? :  는 둘중 하나를 선택해서 보여줄떄 사용    참일떄 거짓일떄 구별해서 말해줌
{ isLogin ? <P>환영합니다</P> : <p>로그인 해주세요</p> }


&&    는 조건이 참일떄만 보여줌  거짓일 경우 아무것도 없음
{ isAdmin &&  <p> 관리자 메뉴</p> }

정리 예시 
{true  ? "👍 참입니다" : "👎 거짓입니다"}  // 무조건 둘 중 하나 출력됨
{true  && "👍 조건이 참이니 이것만 나옴"}   // true니까 출력됨
{false && "❌ 조건이 거짓이면 아무것도 안 나옴"} // 아무 출력 없음






map ( ) 를 활용한 조건부 렌더링

const fruits = [" 사과", "바나나", "포도" ] ;

return ( 
<ul>
  {fruits.map( ( fruit, index ) => (
      <li key = { index } > { fruit } </li>
</ul>
} 


map () 은 배열을 순회하면서 <li> 반복해서 만들어줌
key = ( index }는 리스트 항목의 고유 식별자 ( 알아보기용)


.map                        배열 >>> jsx 반복 요소 만듬

key                          각 요소를 고유하게 구분 

조건부 결합               map( ) + 조건부 렌터링 가능 





항목	        map()	forEach()	         filter()
목적    	변환        	반복            	조건추출
리턴값	✅ 새 배열	❌ 없음        	✅ 새 배열
원본 변경	❌ 없음	❌ 없음     	❌ 없음
사용 시점	출력, 변환	콘솔, 외부작업	조건선택


간단히 설명하면 
map: 👉 “배열을 변환해서 새 배열 만들래!”

forEach: 👉 “그냥 하나씩 돌면서 뭐만 할래!”

filter: 👉 “이 조건 맞는 것만 뽑을래!”


 
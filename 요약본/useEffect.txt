useEffect

이 리액트 함수는  특정 시점에 어떤 일이 자동으로 실행되게 하고 싶을때

예) 
컴포넌트가 처음 화면에 나올 떄
 어떤 값이 바뀔 떄 
화면에서 사라질떄 정리 작업 할 떄

기본 문법
import React, { useEffect } from 'react';

useEffect(() => {
  // 실행할 코드
  return () => {
    // 정리(clean up)할 코드 (선택)
  };
}, [의존값]);


렌더링으로 실행 매 마다

useEffext(() =>  {
   console.log("화면이 그려졌다!");
});

이러면 콘솔에 "화면이 그려졌다!" 라고 찍힘



useEffect(() => {
  console.log("처음 등장했어요!");
}, [ ]);

[ ] 빈 배열이면 처음 한번 만 실행함 보통은 API호출 , 불러올떄 사용



useEffect(() => {
  console.log(`count가 ${count}로 바뀌었어요`);
}, [count]);

count 이런 식으로 실행 해라 느낌 



타이머 응용 

useEffect(() => {
  const timer = setInterval(() => {
    console.log("1초 지남!");
  }, 1000);

  return () => clearInterval(timer); // 컴포넌트 사라질 때 타이머 정리
}, [ ]);


예제)

import React, { useState, useEffect } from 'react';

function App() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log("count 값이 바뀜:", count);
  }, [count]);

  return (
    <div>
      <p>카운트: {count}</p>
      <button onClick={() => setCount(count + 1)}>증가</button>
    </div>
  );
}


여긴 버튼을 추가해서  count 값이 바뀜"이 출력됨 


// ❌
useEffect(async () => {...});
→ 대신 함수 안에서 async 처리

//⭕
useEffect(() => {
  const fetchData = async () => {
    // 비동기 처리
  };
  fetchData();
}, []);




실행 조건	             코드 예시	                         설명
모든 렌더링	         useEffect(() => {...});          	모든 변경마다 실행
처음 한 번	         useEffect(() => {...}, []);	        처음 마운트 시 한 번만
특정 값 변화	         useEffect(() => {...}, [count]);	count 바뀔 때만 실행
정리할 때             return () => {...}	                컴포넌트 사라질 때 정리




useRef 요약 정리


React에서 DOM를 직접 제어하거나 
또는 값을 저장해도 렌더링이 안되게 하고 싶을 때 사용
import { useRef } from "react" ;


기본 문법

coust ref = useRef(초기값) ;
ref.current ; // 여기에 값이 저장됨

ref.useRef                    값을 저장하는 공간
ref.useRef = . . .           으로 값 변경도 가능
값이 바뀌어도 렌더링 안됨!



여기선 실전 예제임 
포커스를 줄떄 (DOM조작용)
import { useRef, useEffect } from "react" ;

function App( ){
const inpuRef = useRef( ) ;

useEffect(() => {
inputRef.current. focus( ) ; //화면에 나타나자마자 포커스 줌 
} , { } ) ;

return <input ref= { inputRef } placeholder = " 여기에 자동 포커스! "   /> ; 


왜 쓰는지 이유 
일반적으로 State 는 DOM은 직접 못 건듬
input에 자동 포커스를 주고 싶을떄 ref로 DOM에 직접 접근해야함



                    중요                 ref={ inputRef } => inputRef.current          <input> DOM를 말함 



렌더링 없이 값을 저장               혹시나 적어둠 렌더링이란 jsx의 코드 즉 화면을 갱신되는 과정을 말함

function App ( ) {
const cointRef. current += 1 ; // 사죠 우덧 
csonsole.log (" 클릭 수 : " , countRef. current) ;
}; 

return(button onC lick= { handleClick } >클릭 !<button>; 
}

useSteate 는 값이 바뀐다면 리렌더링 됨      뭐 이건 당연한거 값이 바뀌면 당연히 바뀌는거

하지만  useRef는  바뀌어도 리렌더링이 안됨      그냥 조용히 저장용임 ( 상관 없이 적는 느낌 )



일반 useState 만으로는 현재 값밖에 모름 
useRef 를 기억장치로 사용 

             중요               useEFFect로 바뀌는 순간에만 저장해야 정확함 




useCallback                    실무용임

함수가 불필요하게 새로 만들어지는걸 막기 위해 씀 자식 컴포넌트에 props로 함수를 넘길때 유용 

기존 문법
const memoizedFn = useCallback(() => {
  // 실행할 코드
}, [의존값]);


uesMemo                      실무용임
시간 오래 걸리는 계산 결과를 저장해두고 의존값이 바뀔떄만 다시 계산을 할수 있도록 함

기존 문법
const memoizedValue = useMemo(() => {
  return 복잡한_계산함수();
}, [의존값]);














